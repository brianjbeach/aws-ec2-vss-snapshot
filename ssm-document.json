{
    "schemaVersion": "1.2",
    "description": "PowerShell script to create a Snapshot of all EBS Volumes on a Windows instance after first creating a Volume Shadow Copy to ensure a consistent checkpoint.",
    "runtimeConfig": {
        "aws:runPowerShellScript": {
            "properties": [{
                "id": "0.aws:runPowerShellScript",
                "timeoutSeconds": 7200,
                "runCommand": [
                    "Function Get-AttachedVolumes",
					"{",
					"$Map = @{'0' = '/dev/sda1'} ",
					"for($x = 1; $x -le 25; $x++) {$Map.add($x.ToString(), [String]::Format('xvd{0}',[char](97 + $x)))}",
					"for($x = 26; $x -le 51; $x++) {$Map.add($x.ToString(), [String]::Format('xvda{0}',[char](71 + $x)))}",
					"for($x = 52; $x -le 77; $x++) {$Map.add($x.ToString(), [String]::Format('xvdb{0}',[char](45 + $x)))}",
					"for($x = 78; $x -le 103; $x++) {$Map.add($x.ToString(), [String]::Format('xvdc{0}',[char](19 + $x)))}",
					"for($x = 104; $x -le 129; $x++) {$Map.add($x.ToString(), [String]::Format('xvdd{0}',[char]($x - 7)))}",
					"Try {",
					"$InstanceId = (Invoke-WebRequest '169.254.169.254/latest/meta-data/instance-id' -UseBasicParsing).Content",
					"$AZ = (Invoke-WebRequest '169.254.169.254/latest/meta-data/placement/availability-zone' -UseBasicParsing).Content",
					"$Region = $AZ.Substring(0, $AZ.Length -1)",
					"$BlockDeviceMappings = (Get-EC2Instance -Region $Region -Instance $InstanceId).Instances.BlockDeviceMappings",
					"}",
					"Catch",
					"{",
					"throw 'ERROR: Could not access the AWS API, therefore, VolumeId is not available. Verify that your instance has an IAM role with permission to describe instances.'",
					"}",
					"Get-WmiObject -Class Win32_DiskDrive | % {",
					"$Drive = $_",
					"Get-WmiObject -Class Win32_DiskDriveToDiskPartition |  Where-Object {$_.Antecedent -eq $Drive.Path.Path} | %{",
					"$D2P = $_",
					"$Partition = Get-WmiObject -Class Win32_DiskPartition |  Where-Object {$_.Path.Path -eq $D2P.Dependent}",
					"$Disk = Get-WmiObject -Class Win32_LogicalDiskToPartition | Where-Object {$_.Antecedent -in $D2P.Dependent} | %{ ",
					"$L2P = $_",
					"Get-WmiObject -Class Win32_LogicalDisk | Where-Object {$_.Path.Path -in $L2P.Dependent}",
					"}",
					"$BlockDeviceMapping = $BlockDeviceMappings | Where-Object {$_.DeviceName -eq $Map[$Drive.SCSITargetId.ToString()]}",
					"New-Object PSObject -Property @{",
					"Device = $Map[$Drive.SCSITargetId.ToString()];",
					"Disk = [Int]::Parse($Partition.Name.Split(',')[0].Replace('Disk #',''));",
					"Boot = $Partition.BootPartition;",
					"Partition = [Int]::Parse($Partition.Name.Split(',')[1].Replace(' Partition #',''));",
					"SCSITarget = $Drive.SCSITargetId;",
					"DriveLetter = If($Disk -eq $NULL) {'NA'} else {$Disk.DeviceID};",
					"VolumeName = If($Disk -eq $NULL) {'NA'} else {$Disk.VolumeName};",
					"VolumeId = If($BlockDeviceMapping -eq $NULL) {'NA'} else {$BlockDeviceMapping.Ebs.VolumeId}",
					"}",
					"}",
					"} | Sort-Object Disk, Partition ",
					"}",
					"Get-AttachedVolumes | Where-Object {$_.Boot -eq $false -and $_.VolumeId -ne $NULL} | % {",
					"Try {",
					"If($_.DriveLetter -eq 'NA') {",
					"$Snapshot = New-EC2Snapshot -VolumeId $_.VolumeId -Description \"Created by VSS-Snapshot. Skipped shadow copy for mount point volume!\"",
					"Write-Host \"WARNING: Skipping Volume Shadow Copy for $($_.VolumeId). This script does not support mount points. The EBS Snapshot was created!\"",
            		"Write-Host \"Creating $($Snapshot.SnapshotId) with description: $($Snapshot.Description)\"",
					"}",
					"Else",
					"{",
            		"$Response = Invoke-Expression \"vssadmin create shadow /for=$($_.DriveLetter)\"",
            		"$ShadowId = ($Response | Select-String -Pattern 'Shadow Copy ID: {([0-9a-f-]*)}').Matches[0].Groups[1].Value",
            		"$Snapshot = New-EC2Snapshot -VolumeId $_.VolumeId -Description \"Created by VSS-Snapshot. Device=$($_.Device); Drive Letter=$($_.DriveLetter); ShadowID=$ShadowId\"",
            		"Write-Host \"Creating $($Snapshot.SnapshotId) with description: $($Snapshot.Description)\"",
            		"$Response = Invoke-Expression \"vssadmin delete shadows /Shadow='{$ShadowId}' /Quiet\"",
					"}",
					"}",
					"Catch",
					"{",
					"Throw $_",
					"}",
					"}"
                ]
            }]
        }
    }
}